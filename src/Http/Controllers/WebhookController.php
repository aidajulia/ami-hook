<?php

namespace Enniel\AmiHook\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Enniel\AmiHook\Http\Requests\CreateWebhookRequest;
use Enniel\AmiHook\Http\Requests\UpdateWebhookRequest;
use Mpociot\CaptainHook\Webhook;

class WebhookController extends Controller
{
    /**
     * Get all of the webhooks generated by the user.
     *
     * @return Response
     */
    public function all(Request $request)
    {
        return Webhook::where('tenant_id', $this->getTenantId($request))
            ->with('lastLog')
            ->with('logs')
            ->orderBy('created_at', 'desc')
            ->get();
    }

    /**
     * Create a new webhook for the user.
     *
     * @param  CreateWebhookRequest  $request
     * @return Response
     */
    public function store(CreateWebhookRequest $request)
    {
        $hook = Webhook::create([
            'url' => $request->url,
            'tenant_id' => $this->getTenantId($request),
            'event' => $request->event,
        ]);

        return response()->json($hook);
    }

    /**
     * Update the given webhook.
     *
     * @param  UpdateWebhookRequest  $request
     * @param  string  $webhookId
     * @return Response
     */
    public function update(UpdateWebhookRequest $request, $webhookId)
    {
        $webhook = Webhook::where('tenant_id', $this->getTenantId($request))
            ->where('id', $webhookId)
            ->firstOrFail();

        $webhook->url = $request->url;
        $webhook->event = $request->event;
        $webhook->save();
    }

    /**
     * Delete the given webhook.
     *
     * @param  Request  $request
     * @param  string  $webhookId
     * @return Response
     */
    public function destroy(Request $request, $webhookId)
    {
        Webhook::where('tenant_id', $this->getTenantId($request))
            ->where('id', $webhookId)
            ->firstOrFail()
            ->delete();
    }

    protected function getTenantId(Request $request)
    {
        return $request->user()->getKey();
    }
}
